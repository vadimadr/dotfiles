{
  "For loop with index": {
    "prefix": "fori",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:n}; ++${1:i}) {",
      "    $0",
      //   "    ${0:/* code */}",
      "}"
    ]
  },
  "For loop reversed": {
    "prefix": "forr",
    "body": [
      "for (${3:int} ${1:i} = ${2:n}; ${1:i} >= ${4:0}; --${1:i}) {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "For loop with obj": {
    "prefix": "fore",
    "body": [
      "for (${auto}& ${2} : ${1}) {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "    $1",
      "}",
      "catch (const std::exception&) {",
      "    $2",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1) {",
      "    ${0:/* code */}",
      "}"
    ],
    "description": "Code snippet for if statement"
  },
  "else if": {
    "prefix": [
      "elif",
      "elseif"
    ],
    "body": [
      "else if ($1) {",
      "    ${0:/* code */}",
      "}"
    ]
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ($1) {",
      "    ${0:/* code */}",
      "}"
    ],
    "description": "Code snippet for if statement"
  },
  "do": {
    "prefix": "do",
    "body": [
      "do {",
      "    ${0:/* code */}",
      "} while($1);"
    ]
  },
  "namespace": {
    "prefix": [
      "ns",
      "namespace"
    ],
    "body": [
      "namespace ${1:detail} {",
      "$0",
      "} // namespace ${1:detail}"
    ]
  },
  "ifdef": {
    "prefix": "ifdef",
    "body": [
      "#ifdef ${1:NDEBUG}",
      "$0",
      "#endif // ${1:NDEBUG}"
    ]
  },
  "return": {
    "prefix": "re",
    "body": [
      "return $1;"
    ],
    "description": "Code snippet for if statement"
  },
  "main": {
    "prefix": "main",
    "body": [
      "int main(int argc, char const* argv[]) {",
      "    $1",
      "    return 0;",
      "}"
    ]
  },
  "Catch: TEST_CASE": {
    "prefix": "test",
    "description": "Catch3 test case snippet",
    "body": [
      "TEST_CASE(\"$1\") {",
      "    $2",
      "}"
    ]
  },
  "Catch: SECTION": {
    "prefix": "test_sec",
    "description": "Catch3 test case snippet",
    "body": [
      "SECTION(\"$1\") {",
      "    $2",
      "}"
    ]
  },
  "Catch: REQUIRE": {
    "prefix": "req",
    "description": "Catch3 REQUIRE snippet",
    "body": [
      "REQUIRE( $1 );"
    ]
  },
  "include": {
    "prefix": [
      "inc",
      "inc<"
    ],
    "body": "#include <$1>",
    "description": "Include header file"
  },
  "include_proj": {
    "prefix": [
      "Inc",
      "inc\""
    ],
    "body": "#include \"$1\"",
    "description": "Include header file"
  },
  "Make Unique": {
    "prefix": "mku",
    "body": "std::make_unique<$1>($0)"
  },
  "Make Shared": {
    "prefix": "mks",
    "body": "std::make_shared<$1>($0)"
  },
  "virtual destructor": {
    "prefix": "vdes",
    "body": "virtual ~$1() = default;"
  },
  "scanf": {
    "prefix": "scanf",
    "body": "scanf(\"%${d}\", ${n});"
  },
  "ustd": {
    "prefix": "ustd",
    "body": "using namespace std;"
  },
  "Istream iterator": {
    "prefix": "cinit",
    "body": "istream_iterator<${int}>(cin)"
  },
  "Stream output": {
    "prefix": "cout",
    "body": "std::cout << $1 << std::endl;"
    // "body": "cout << $1 << '\\n';"
  },
  "Class": {
    "prefix": [
      "class",
      "cls"
    ],
    "body": [
      "class ${1:MyClass} {",
      "  public:",
      "    $0",
      "};"
    ]
  },
  "Class Rule-3": {
    "prefix": "class3",
    "body": [
      "class ${1:MyClass} {",
      "  public:",
      "    ${1:MyClass}();",
      "    ${1:MyClass}(const ${1:MyClass}& other) = default;",
      "    ~${1:MyClass}() = default;",
      "    ${1:MyClass}& operator=(const ${1:MyClass}& other) = default;",
      "};"
    ]
  },
  "Class Rule-5": {
    "prefix": "class5",
    "body": [
      "class ${1:MyClass} {",
      "  public:",
      "    ${1:MyClass}();",
      "    ${1:MyClass}(const ${1:MyClass}& other) = default;",
      "    ${1:MyClass}(${1:MyClass}&& other) = default;",
      "    ~${1:MyClass}() = default;",
      "    ${1:MyClass}& operator=(const ${1:MyClass}& other) = default;",
      "    ${1:MyClass}& operator=(${1:MyClass}$& other) = default;",
      "};"
    ]
  },
  "Interface": {
    "prefix": [
      "iface",
      "interface"
    ],
    "body": [
      "class ${1:IMyInterface} {",
      "  public:",
      "    virtual ~${1:IMyInterface}() = default;",
      "};"
    ]
  },
  // Types
  "const ref": {
    "prefix": "cr",
    "body": "const $1&"
  },
  "string": {
    "prefix": [
      "ss",
      "str"
    ],
    "body": "std::string"
  },
  "cstr": {
    "prefix": [
      "cstr",
      "css"
    ],
    "description": "const string&",
    "body": "const std::string& "
  },
  "int64": {
    "prefix": [
      "i64",
      "ll"
    ],
    "body": "int64_t"
  },
  "vector": {
    "prefix": [
      "vec",
      "vv"
    ],
    "body": "vector<$1> $2;"
  },
  "vector<long long>": {
    "prefix": "vll",
    "body": "vector<int64_t> $1;"
  },
  "vector<int>": {
    "prefix": "vii",
    "body": "vector<int> $1;"
  },
  // CP snippets
  "Begin End": {
    "prefix": [
      "bege",
      "all"
    ],
    "body": "$1.begin(), $1.end()"
  },
  "Make Pair": {
    "prefix": [
      "mkp",
      "mp"
    ],
    "body": "make_pair($0)"
  },
  "first": {
    "prefix": "fi",
    "body": "first"
  },
  "second": {
    "prefix": "se",
    "body": "second"
  },
  "push back": {
    "prefix": "pb",
    "body": "push_back($0);"
  },
  "debug": {
    "prefix": "deb",
    "body": "deb($0);"
  },
  "emplace back": {
    "prefix": "eb",
    "body": "emplace_back($0);"
  },
  // Read input
  "Read vector": {
    "prefix": "reve",
    "body": [
      "vector<int> ${1:a};",
      "for (auto $x: ${1: a}) cin >> x;"
    ]
  },
  "Read int": {
    "prefix": "rei",
    "body": [
      "int ${1:a};",
      "cin >> ${1:a};"
    ]
  },
  //
  "operator<<": {
    "description": "Template for ostream operator",
    "prefix": "operator<<",
    "body": [
      "template <class T> ostream &operator<<(ostream &s, const vector<T> &a) {",
      "    s << \"[\";",
      "    for (int i = 0; i < a.size() - 1; ++i)",
      "        s << a[i] << \", \";",
      "    s << a[a.size() - 1] << \"]\";",
      "    return s;",
      "}"
    ]
  },
  "pragma once": {
    "description": "Pragma once",
    "prefix": [
      "once",
      "pragma"
    ],
    "body": [
      "#pragma once"
    ]
  }
}